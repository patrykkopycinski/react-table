{"version":3,"sources":["components/layout/AppContainer.js","components/layout/GlobalStyle.js","components/table/TableHeader.js","components/table/TableColumnHeader.js","components/table/TableColumnHeaderContent.js","components/table/TableWrapper.js","components/table/TableCellInput.js","components/table/TableColumn.js","components/buttons/Button.js","components/buttons/DeleteButton.js","components/table/TableRow.js","components/buttons/AddButton.js","components/table/Table.js","components/csvutils.js","components/constants.js","components/layout/AddRowSection.js","components/buttons/ExportCSVButton.js","components/buttons/CreateTableButton.js","components/utils.js","App.js","index.js"],"names":["AppContainer","styled","div","_templateObject","GlobalStyle","createGlobalStyle","GlobalStyle_templateObject","props","whiteColor","TableHeader","thead","TableHeader_templateObject","ColumnHeader","th","TableColumnHeader_templateObject","TableColumnHeaderContent","TableColumnHeaderContent_templateObject","TableWrapper","table","TableWrapper_templateObject","StyledInput","input","TableCellInput_templateObject","TableCellInput","_ref","initialValue","onChange","_useState","useState","_useState2","Object","slicedToArray","value","setValue","_useDebouncedCallback","useDebouncedCallback","debouncedCallback","react_default","a","createElement","defaultValue","event","target","defaultProps","TableColumn","td","TableColumn_templateObject","Button","button","Button_templateObject","StyledButton","DeleteButton_templateObject","DeleteButton","index_esm","TablerRowWrapper","tr","TableRow_templateObject","TableRow","columns","data","id","onInputChange","onDeleteClick","map","column","table_TableColumn","key","table_TableCellInput","buttons_DeleteButton","onClick","AddButton_templateObject","AddButton","AddButton_StyledButton","Table","rows","onUpdateRowField","onUpdateColumnField","onDeleteRow","onAddColumn","onDeleteColumn","columnEntries","entries","columnKeys","_ref2","_ref3","rowEntries","table_TableWrapper","table_TableHeader","_ref4","_ref5","TableColumnHeader","table_TableColumnHeaderContent","bind","buttons_AddButton","_ref6","_ref7","table_TableRow","exportCSV","console","error","JSON","stringify","rowsArray","values","row","getRowsWithExistingColumns","columnsCSVContent","join","getColumnsCSVContent","rowsCCVContent","reduce","acc","item","getRowsCSVContent","INITIAL_COLUMNS","product","calories","fat","protein","INITIAL_ROWS","StyledSection","AddRowSection_templateObject","AddRowSection","ExportCSVButton_templateObject","ExportCSVButton","ExportCSVButton_StyledButton","CreateTableButton_templateObject","CreateTableButton","CreateTableButton_StyledButton","addItem","collection","uuid","update","$merge","defineProperty","deleteItem","$unset","App","initialRows","i","rowsCount","arguments","length","undefined","state","getInitialRowsState","setColumns","_useState3","_useState4","setRows","hasColumns","keys","layout_AppContainer","layout_GlobalStyle","buttons_CreateTableButton","react","table_Table","rowId","field","updatedRows","$set","updateRowField","columnId","updatedColumns","updateColumnField","newRows","newColumns","layout_AddRowSection","buttons_ExportCSVButton","csvContent","blob","Blob","type","FileSaver","saveAs","downloadCSV","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.219a0aa2.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst AppContainer = styled.div`\n    text-align: center;\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    font-size: calc(10px + 2vmin);\n    color: white;\n`;\n\nexport default AppContainer;\n","import { createGlobalStyle } from 'styled-components'\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    color: ${props => (props.whiteColor ? 'white' : 'black')};\n  }\n`\nexport default GlobalStyle;\n","import styled from 'styled-components';\n\nconst TableHeader = styled.thead`\n    border: 1px solid #333;\n`;\n\nexport default TableHeader;\n","import styled from 'styled-components';\n\nconst ColumnHeader = styled.th`\n    padding: 8px;\n    background-color: #fde9d9;\n    font-size: 20px;\n    border-width: 1px;\n    border-style: solid;\n    border-color: #f79646 #ccc;\n`\n\nexport default ColumnHeader;\n","import styled from 'styled-components';\n\nconst TableColumnHeaderContent = styled.div`\n    display: flex;\n`\n\nexport default TableColumnHeaderContent;\n","import styled from 'styled-components';\n\nconst TableWrapper = styled.table`\n    margin: 0 auto;\n    border-collapse: collapse;\n    background: #fff;\n    border: 1px solid #fff; /*for older IE*/\n    border-style: hidden;\n`\n\nexport default TableWrapper;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { useDebouncedCallback } from 'use-debounce';\n\nconst StyledInput = styled.input`\n    width: 100%;\n    border: 0;\n    padding: 10px;\n    font-size: inherit;\n    box-sizing: border-box;\n`;\n\nconst TableCellInput = ({ initialValue, onChange }) => {\n    const [value, setValue] = useState(initialValue);\n    const [debouncedCallback] = useDebouncedCallback(\n        (value) => {\n          setValue(value);\n          onChange(value);\n        },\n        300,\n    );\n    const handleOnChange = (event) => debouncedCallback(event.target.value);\n\n    return (\n        <StyledInput\n            defaultValue={value}\n            onChange={handleOnChange}\n        />\n    );\n};\n\nTableCellInput.propTypes = {\n    value: PropTypes.string,\n    onChange: PropTypes.func.isRequired,\n};\n\nTableCellInput.defaultProps = {\n    initialValue: '',\n};\n\nexport default TableCellInput;","import styled from 'styled-components';\n\nconst TableColumn = styled.td`\n    border-width: 1px;\n    border-style: solid;\n    border-color: #f79646 #ccc;\n`;\n\nexport default TableColumn;\n","import styled from 'styled-components';\n\nconst Button = styled.button`\n    cursor: pointer;\n    background: none;\n    border: 0;\n    font-size: inherit;\n\n    &:focus {\n        outline: 0;\n    }\n    \n    svg {\n        display: block;\n    }\n`;\n\nexport default Button;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { MdDelete } from 'react-icons/md';\nimport Button from './Button';\n\nconst StyledButton = styled(Button)`\n    color: #333;\n\n    &:hover {\n        color: #b71f1f;\n    }\n`;\n\nconst DeleteButton = (props) => (\n    <StyledButton {...props}>\n        <MdDelete />\n    </StyledButton>\n);\n\nexport default DeleteButton\n\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport TableColumn from './TableColumn';\nimport TableCellInput from './TableCellInput';\nimport DeleteButton from '../buttons/DeleteButton';\n\nconst TablerRowWrapper = styled.tr`\n    font-size: 14px;\n`;\n\nconst TableRow = ({ columns, data, id, onInputChange, onDeleteClick }) => (\n    <TablerRowWrapper>\n        {columns.map((column) => (\n            <TableColumn key={column}>\n                <TableCellInput\n                    initialValue={data[column]}\n                    onChange={onInputChange(id, column)}\n                />\n            </TableColumn>\n        ))}\n        <TableColumn key=\"delete\">\n            <DeleteButton onClick={onDeleteClick} />\n        </TableColumn>\n    </TablerRowWrapper>\n);\n\nexport default TableRow;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { MdAdd } from 'react-icons/md';\n\nimport Button from './Button';\n\nconst StyledButton = styled(Button)`\n    color: #35da35;\n    font-size: 40px;\n`;\n\nconst AddButton = (props) => (\n    <StyledButton {...props}>\n        <MdAdd />\n    </StyledButton>\n);\n\nexport default AddButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TableHeader from './TableHeader';\nimport TableColumnHeader from './TableColumnHeader';\nimport TableColumnHeaderContent from './TableColumnHeaderContent';\nimport TableWrapper from './TableWrapper';\nimport TableCellInput from './TableCellInput';\nimport TableRow from './TableRow';\nimport DeleteButton from '../buttons/DeleteButton';\nimport AddButton from '../buttons/AddButton';\n\n\nconst Table = ({ \n    rows,\n    columns,\n    onUpdateRowField,\n    onUpdateColumnField,\n    onDeleteRow,\n    onAddColumn,\n    onDeleteColumn,\n }) => {\n    const columnEntries = Object.entries(columns);\n    const columnKeys = columnEntries.map(([key, value]) => key);\n    const rowEntries = Object.entries(rows);\n    \n    return (\n        <TableWrapper>\n            <TableHeader>\n                <tr>\n                    {columnEntries.map(([key,value]) => (\n                        <TableColumnHeader key={key}>\n                            <TableColumnHeaderContent>\n                                <TableCellInput\n                                    initialValue={value}\n                                    onChange={onUpdateColumnField(key)}\n                                />\n                                {' '}\n                                <DeleteButton onClick={onDeleteColumn.bind(this, key)} />\n                            </TableColumnHeaderContent>\n                        </TableColumnHeader>\n                    ))}\n                    <td key=\"addColumn\">\n                        <AddButton onClick={onAddColumn} />\n                    </td>\n                </tr>    \n            </TableHeader>\n            <tbody>\n                {rowEntries.map(([key, value]) => (\n                    <TableRow\n                        key={key}\n                        columns={columnKeys}\n                        id={key}\n                        data={value}\n                        onInputChange={onUpdateRowField}\n                        onDeleteClick={onDeleteRow.bind(this, key)}\n                    />\n                ))}\n            </tbody>\n        </TableWrapper>\n    )\n};\n\nTable.propTypes = {\n    rows: PropTypes.object.isRequired,\n    columns: PropTypes.object.isRequired,\n    onUpdateRowField: PropTypes.func.isRequired,\n    onUpdateColumnField: PropTypes.func.isRequired,\n    onAddColumn: PropTypes.func.isRequired,\n    onDeleteRow: PropTypes.func.isRequired,\n    onDeleteColumn: PropTypes.func.isRequired,\n};\n\nexport default Table;","import FileSaver from 'file-saver';\n\nexport function getColumnsCSVContent(columns) {\n    return columns.map(([key, value]) => value).join(',') + '\\n'\n};\n\nexport function getRowsWithExistingColumns(rows, columns) {\n    return Object.values(rows).map((row) => columns.map(([key]) => row[key]));\n}\n\nexport function getRowsCSVContent(rows) {\n    return rows.map((row) => row.join(',')).reduce((acc, item) => acc + item + '\\n', '');\n}\n\nexport function downloadCSV(csvContent) {\n    const blob = new Blob([csvContent], {type: \"text/csv;charset=utf-8\"});\n\n    FileSaver.saveAs(blob, \"data.txt\");\n}\n\nexport function exportCSV(columns, rows) {\n    console.error('asdd', columns, JSON.stringify(rows));\n    const columnEntries = Object.entries(columns);\n    const rowsArray = getRowsWithExistingColumns(rows, columnEntries);\n    \n    const columnsCSVContent = getColumnsCSVContent(columnEntries);\n    const rowsCCVContent = getRowsCSVContent(rowsArray);\n\n    console.error('asd', columnsCSVContent, rowsCCVContent);\n\n    return columnsCSVContent + rowsCCVContent;\n};\n","export const INITIAL_COLUMNS = {\n    product: 'Product (100g serving)',\n    calories: 'Calories',\n    fat: 'Fat (g)',\n    protein: 'Protein (g)',\n  };\n  \nexport const INITIAL_ROWS = 5;","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledSection = styled.div`\n    margin-bottom: 16px;\n    text-align: right;\n`;\n\nconst AddRowSection = (props) => (\n    <StyledSection {...props} />\n);\n\nexport default AddRowSection;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { MdFileDownload } from 'react-icons/md'\nimport Button from './Button';\n\nconst StyledButton = styled(Button)`\n    width: 300px;\n    background: #333;\n    color: #fff;\n    font-size: 20px;\n    line-height: 32px;\n\n    &:hover {\n        background: #61dafb;\n    }\n\n    svg {\n        display: inline-block;\n        vertical-align: middle;\n    }\n`;\n\nconst ExportCSVButton = (props) => (\n    <StyledButton {...props}>\n        {'Export data as CSV '}\n        <MdFileDownload />\n    </StyledButton>\n)\n\nexport default ExportCSVButton;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Button from './Button';\n\nconst StyledButton = styled(Button)`\n    font-size: 24px;\n    color: #fff;\n    padding: 8px 16px;\n    background: #35da35;\n`;\n\nconst CreateTableButton = ({ onClick }) => (\n    <StyledButton onClick={onClick}>\n        Create Table\n    </StyledButton>\n)\n\nexport default CreateTableButton;\n","import uuid from 'uuid/v4';\nimport update from 'immutability-helper';\n\nimport { INITIAL_ROWS } from './constants';\n\nexport function getInitialRowsState(rowsCount = INITIAL_ROWS) {\n    let i;\n    let state = {};\n  \n    for (i = 0; i < rowsCount; i++) {\n        const id = uuid();\n        state[id] = {}\n    }\n  \n    return state;\n}\n\nexport function addItem(collection, value) {\n    const id = uuid();\n\n    return update(collection, {\n        $merge: {\n            [id]: value,\n        }\n    })\n}\n\nexport function deleteItem(collection, id) {\n    return update(collection, {\n        $unset: [id]\n    });\n}\n\nexport function updateColumnField(columns, columnId, value) {\n    return update(columns, {\n        [columnId]: {\n            $set: value\n        }\n    })\n}\n\nexport function updateRowField(rows, rowId, field, value) {\n    return update(rows, {\n        [rowId]: {\n            [field]: {\n                $set: value\n            }\n        }\n    });\n}","import React, { Fragment, useState } from 'react';\n\nimport AppContainer from './components/layout/AppContainer';\nimport GlobalStyle from './components/layout/GlobalStyle';\nimport Table from './components/table/Table';\nimport { downloadCSV, exportCSV } from './components/csvutils';\nimport { INITIAL_COLUMNS } from './components/constants'; \nimport AddRowSection from './components/layout/AddRowSection';\nimport ExportCSVButton from './components/buttons/ExportCSVButton';\nimport CreateTableButton from './components/buttons/CreateTableButton';\n\nimport { \n  getInitialRowsState,\n  addItem,\n  deleteItem,\n  updateColumnField, \n  updateRowField,\n} from './components/utils';\nimport AddButton from './components/buttons/AddButton';\n\n\nfunction App() {\n  const initialRows = getInitialRowsState();\n\n  const [columns, setColumns] = useState(INITIAL_COLUMNS);\n  const [rows, setRows] = useState(initialRows);\n\n  const handelCreateTable = () => {\n    setColumns(INITIAL_COLUMNS);\n    setRows(initialRows);\n  }\n\n  const handleAddRow = () => {\n      const updatedRows = addItem(rows, {})\n\n      return setRows(updatedRows);\n  }\n\n  const handleAddColumn = () => {\n      const updatedColumns = addItem(columns, '')\n\n      return setColumns(updatedColumns);\n  }\n\n  const handleUpdateColumnField = (columnId) => (value) => {\n      const updatedColumns = updateColumnField(columns, columnId, value);\n\n      return setColumns(updatedColumns);\n  };\n\n  const handleUpdateRowField = (rowId, field) => (value) => {\n      const updatedRows = updateRowField(rows, rowId, field, value);\n\n      return setRows(updatedRows);\n  }\n\n  const handleDeleteRow = (rowId) => {\n      const newRows = deleteItem(rows, rowId)\n\n      return setRows(newRows);\n  }\n\n  const handleDeleteColumn = (columnId) => {\n      const newColumns = deleteItem(columns, columnId);\n\n      return setColumns(newColumns);\n  }\n  \n  const handleExportCSV = () => {\n    const csvContent = exportCSV(columns, rows);\n\n    downloadCSV(csvContent);\n  }\n\n  const hasColumns = Object.keys(columns).length;\n\n  return (\n    <AppContainer>\n      <GlobalStyle />\n      <div>\n        {!hasColumns && (\n          <div>\n            <CreateTableButton onClick={handelCreateTable} />\n          </div>\n        )}\n        {hasColumns && (\n          <Fragment>\n            <Table \n              rows={rows}\n              columns={columns}\n              onUpdateRowField={handleUpdateRowField}\n              onUpdateColumnField={handleUpdateColumnField}\n              onDeleteRow={handleDeleteRow}\n              onDeleteColumn={handleDeleteColumn}\n              onAddColumn={handleAddColumn}\n            />\n            <AddRowSection>\n              <AddButton onClick={handleAddRow} />\n            </AddRowSection>\n            <div>\n              <ExportCSVButton onClick={handleExportCSV} />\n            </div>\n          </Fragment>\n        )}\n      </div>\n    </AppContainer>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}